const fs = require('fs-extra');
const path = require('path');
const phantom = require('phantom');
const sha256 = require('sha256');
const untildify = require('untildify');
const staticfile = require('connect-static-file');
const isbot = require('isbot');
const sleep = require('util').promisify(setTimeout);

const Renderer = (options = {}) => {
  const defwaiting = +options.waiting || 1000;
  const expire = +options.expire || 60 * 60 * 1000;
  const capturedir = options.capturedir || path.join(process.cwd(), '.cache');
  const baseurl = options.baseurl;

  if( !baseurl ) throw new Error('missing options.baseurl');

  let instance;

  const resourcefilter = function(requestData, request) {
    if( /\.css$/.test(requestData.url) ) {
      request.abort();
    }
  };

  const tosavename = (src) => {
    src = src.substring(1);
    const pathname = src.split('?')[0] || 'index';
    let qry = src.split('?').slice(1).join('?');
    if( !qry ) return '/' + pathname;
    return '/' + pathname + '?' + sha256(qry);
  };

  return {
    cachefile(src) {
      const file = path.join(capturedir, tosavename(src));
      if( fs.existsSync(file) ) {
        const stats = fs.statSync(file);
        const retentionms = (new Date().getTime() - stats.mtime) / 1000;

        if( retentionms < expire ) return file;
      }

      return null;
    },
    async capture(src, waiting) {
      if( !src ) throw new Error('missing src');
      if( !src.startsWith('/') ) throw new Error('src must be a absolute path');

      instance = instance || await phantom.create(options.argv || ['--ignore-ssl-errors=yes', '--load-images=no']);

      const page = await instance.createPage();
      page.on('onResourceRequested', true, resourcefilter);

      await page.open(baseurl + src);
      await sleep(waiting || defwaiting);
      const html = await (page.property('content') || '') + `<!-- generated by httpd-ssr '${src}' at ${new Date().toISOString()}' -->`;

      const file = path.join(capturedir, tosavename(src));
      console.log('file', src, tosavename(src));
      const dirname = path.dirname(file);
      fs.ensureDirSync(dirname);
      fs.writeFileSync(file, html, {
        flag: 'w'
      });
      return html;
    },
    async close() {
      await instance.exit();
    }
  };
};


module.exports = (options) => {
  let renderer;
  const baseurl = options.baseurl;
  const capturedir = path.resolve(process.cwd(), untildify(options.capturedir || '.cache'));

  return (req, res, next) => {
    // const pathname = req._parsedUrl.pathname;
    // if( fs.existsSync(path.join(docbase, pathname)) ) return next();
    // if( !evaluatepseudopage(pathname) ) return next();

    const ua = req.headers['user-agent'];
    if( ua && ~ua.toLowerCase().indexOf('phantomjs') ) return next();

    res.setHeader('Content-Type', 'text/html; charset=UTF-8');

    let confirm = false;
    if( isbot(ua) ) confirm = true;
    if( ~req.url.indexOf('$$bot') ) confirm = true;

    const url = req.url.split('$$bot').join('');
    const cachefile = renderer && renderer.cachefile(url);
    if( confirm && cachefile ) return staticfile(cachefile)(req, res, next);

    confirm && (async () => {
      if( !renderer ) {
        renderer = await Renderer({
          baseurl,
          capturedir
        });
      }

      try {
        await renderer.capture(url);
      } catch(err) {
        console.error('capture fail', url, err);
      }
    })();

    next();
  };
};
